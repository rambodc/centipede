(()=>{"use strict";CGL.ShaderModifier=class{constructor(e,t,s){this._cgl=e,this._name=t,this._origShaders={},this._uniforms=[],this._structUniforms=[],this._definesToggled={},this._defines={},this._mods=[],this._textures=[],this._boundShader=null,this._changedDefines=!0,this._changedUniforms=!0,this._modulesChanged=!1,this.needsTexturePush=!1,this._lastShader=null,this._attributes=[],1==this._cgl.glVersion&&(this._cgl.gl.getExtension("OES_texture_float"),this._cgl.gl.getExtension("OES_texture_float_linear"),this._cgl.gl.getExtension("OES_texture_half_float"),this._cgl.gl.getExtension("OES_texture_half_float_linear"))}bind(e,t){const s=e||this._cgl.getShader();if(!s)return;this._boundShader=this._origShaders[s.id];let i=!1;if(this._boundShader&&this._lastShader!=this._boundShader.shader&&(this._boundShader.shader.hasModule(this._mods[0].id)||(i=!0)),(i||!this._boundShader||s.lastCompile!=this._boundShader.lastCompile||this._modulesChanged||s._needsRecompile)&&(this._boundShader&&this._boundShader.shader.dispose(),s._needsRecompile&&s.compile(),this._boundShader=this._origShaders[s.id]={lastCompile:s.lastCompile,orig:s,shader:s.copy()},1==this._cgl.glVersion&&(this._boundShader.shader.enableExtension("GL_OES_standard_derivatives"),this._boundShader.shader.enableExtension("GL_OES_texture_float"),this._boundShader.shader.enableExtension("GL_OES_texture_float_linear"),this._boundShader.shader.enableExtension("GL_OES_texture_half_float"),this._boundShader.shader.enableExtension("GL_OES_texture_half_float_linear")),this._addModulesToShader(this._boundShader.shader),this._updateDefinesShader(this._boundShader.shader),this._updateUniformsShader(this._boundShader.shader)),this._boundShader.wireframe=s.wireframe,this._changedDefines&&this._updateDefines(),this._changedUniforms&&this._updateUniforms(),!1!==t&&this._cgl.pushShader(this._boundShader.shader),this._boundShader.shader.copyUniformValues(this._boundShader.orig),this.needsTexturePush){for(let e=0;e<this._textures.length;e+=1){const t=this._textures[e][0],s=this._textures[e][1],i=this._textures[e][2];if(this._getUniform(t)){const e=this.getPrefixedName(t),r=this._boundShader.shader.getUniform(e);r&&this._boundShader.shader.pushTexture(r,s,i)}}this.needsTexturePush=!1,this._textures.length=0}return this._modulesChanged=!1,this._boundShader.shader.fromMod=this,this.onBind&&this.onBind(this._boundShader.shader),this._boundShader.shader}unbind(e){this._boundShader&&!1!==e&&this._cgl.popShader(),this._boundShader=null}_addModulesToShader(e){let t;this._mods.length>1&&(t=this._mods[0]);for(let s=0;s<this._mods.length;s++)e.addModule(this._mods[s],t)}_removeModulesFromShader(e){for(const t in this._origShaders)this._origShaders[t].shader.removeModule(e)}addModule(e){this._mods.push(e),this._modulesChanged=!0}removeModule(e){const t=[];let s=!1;for(let i=0;i<this._mods.length;i++)this._mods[i].title==e&&(s=!0,this._removeModulesFromShader(this._mods[i]),t.push(i));for(let e=t.length-1;e>=0;e-=1)this._mods.splice(t[e],1);this._modulesChanged=!0}_updateUniformsShader(e){for(let t=0;t<this._uniforms.length;t++){const s=this._uniforms[t],i=this.getPrefixedName(s.name);if(!e.hasUniform(i)&&!s.structName){let t=null;"both"===s.shaderType?(t=e.addUniformBoth(s.type,i,s.v1,s.v2,s.v3,s.v4),t.comment="mod: "+this._name):"frag"===s.shaderType?(t=e.addUniformFrag(s.type,i,s.v1,s.v2,s.v3,s.v4),t.comment="mod: "+this._name):"vert"===s.shaderType&&(t=e.addUniformVert(s.type,i,s.v1,s.v2,s.v3,s.v4),t.comment="mod: "+this._name)}}for(let t=0;t<this._structUniforms.length;t+=1){const s=this._structUniforms[t];let i=s.uniformName,r=s.structName;const h=s.members;i=this.getPrefixedName(s.uniformName),r=this.getPrefixedName(s.structName),"frag"===s.shaderType&&e.addUniformStructFrag(r,i,h),"vert"===s.shaderType&&e.addUniformStructVert(r,i,h),"both"===s.shaderType&&e.addUniformStructBoth(r,i,h)}}_updateUniforms(){for(const e in this._origShaders)this._updateUniformsShader(this._origShaders[e].shader);this._changedUniforms=!1}_setUniformValue(e,t,s){const i=e.getUniform(t);i&&i.setValue(s)}setUniformValue(e,t){if(!this._getUniform(e))return;const s=this.getPrefixedName(e);for(const e in this._origShaders)this._setUniformValue(this._origShaders[e].shader,s,t)}hasUniform(e){return this._getUniform(e)}_getUniform(e){for(let t=0;t<this._uniforms.length;t++){if(this._uniforms[t].name==e)return this._uniforms[t];if(this._uniforms[t].structName&&this._uniforms[t].propertyName==e)return this._uniforms[t]}return!1}_getStructUniform(e){for(let t=0;t<this._structUniforms.length;t+=1)if(this._structUniforms[t].uniformName===e)return this._structUniforms[t];return null}_isStructUniform(e){for(let t=0;t<this._uniforms.length;t++){if(this._uniforms[t].name==e)return!1;if(this._uniforms[t].structName&&this._uniforms[t].propertyName==e)return!0}return!1}addUniform(e,t,s,i,r,h,n,o,d,a){if(!this._getUniform(t)){let _="both";a&&(_=a),this._uniforms.push({type:e,name:t,v1:s,v2:i,v3:r,v4:h,structUniformName:n,structName:o,propertyName:d,shaderType:_}),this._changedUniforms=!0}}addUniformFrag(e,t,s,i,r,h){this.addUniform(e,t,s,i,r,h,null,null,null,"frag"),this._changedUniforms=!0}addUniformVert(e,t,s,i,r,h){this.addUniform(e,t,s,i,r,h,null,null,null,"vert"),this._changedUniforms=!0}addUniformBoth(e,t,s,i,r,h){this.addUniform(e,t,s,i,r,h,null,null,null,"both"),this._changedUniforms=!0}addUniformStruct(e,t,s,i){for(let r=0;r<s.length;r+=1){const h=s[r];"2i"!==h.type&&"i"!==h.type&&"3i"!==h.type||"both"!==i||console.error("Adding an integer struct member to both shaders can potentially error. Please use different structs for each shader. Error occured in struct:",e," with member:",h.name," of type:",h.type,"."),this._getUniform(t+"."+h.name)||this.addUniform(h.type,t+"."+h.name,h.v1,h.v2,h.v3,h.v4,t,e,h.name,i)}this._getStructUniform(t)||this._structUniforms.push({structName:e,uniformName:t,members:s,shaderType:i})}addUniformStructVert(e,t,s){this.addUniformStruct(e,t,s,"vert")}addUniformStructFrag(e,t,s){this.addUniformStruct(e,t,s,"frag")}addUniformStructBoth(e,t,s){this.addUniformStruct(e,t,s,"both")}addAttribute(e){for(let t=0;t<this._attributes.length;t++)if(this._attributes[t].name==e.name&&this._attributes[t].nameFrag==e.nameFrag)return;this._attributes.push(e)}pushTexture(e,t,s){if(!t)throw new Error("no texture given to texturestack");this._textures.push([e,t,s]),this.needsTexturePush=!0}_removeUniformFromShader(e,t){t.hasUniform(e)&&t.removeUniform(e)}removeUniform(e){if(this._getUniform(e)){for(let t=this._uniforms.length-1;t>=0;t-=1){const s=e;if(this._uniforms[t].name==e&&!this._uniforms[t].structName){for(const e in this._origShaders)this._removeUniformFromShader(this.getPrefixedName(s),this._origShaders[e].shader);this._uniforms.splice(t,1)}}this._changedUniforms=!0}}removeUniformStruct(e){if(this._getStructUniform(e)){for(let t=this._structUniforms.length-1;t>=0;t-=1){const s=this._structUniforms[t];if(s.uniformName===e){for(const e in this._origShaders)for(let t=0;t<s.members.length;t+=1){const i=s.members[t];this._removeUniformFromShader(this.getPrefixedName(i.name),this._origShaders[e].shader)}this._structUniforms.splice(t,1)}}this._changedUniforms=!0}}getPrefixedName(e){const t=this._mods[0].group;if(void 0!==t)return 0==e.indexOf("MOD_")&&(e="mod"+t+"_"+(e=e.substr("MOD_".length))),e}_updateDefinesShader(e){for(const t in this._defines){const s=this.getPrefixedName(t);null!==this._defines[t]&&void 0!==this._defines[t]?e.define(s,this._defines[t]):e.removeDefine(s)}for(const t in this._definesToggled){const s=this.getPrefixedName(t);e.toggleDefine(s,this._definesToggled[t])}}_updateDefines(){for(const e in this._origShaders)this._updateDefinesShader(this._origShaders[e].shader);this._changedDefines=!1}define(e,t){void 0===t&&(t=!0),this._defines[e]=t,this._changedDefines=!0}removeDefine(e){this._defines[e]=null,this._changedDefines=!0}hasDefine(e){return null!==this._defines[e]&&void 0!==this._defines[e]}toggleDefine(e,t){this._changedDefines=!0,this._definesToggled[e]=t}currentShader(){return this._boundShader?this._boundShader.shader:null}dispose(){}},((this.CGL=this.CGL||{}).COREMODULES=this.CGL.COREMODULES||{}).Shadermodifier={}.Shadermodifier})();